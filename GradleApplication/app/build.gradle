apply plugin: 'com.android.application'
apply from: rootProject.file('module.gradle')


android {
    signingConfigs {
        config {
            keyAlias 'key'
            keyPassword '123456'
            storeFile file(rootProject.getRootDir().getAbsolutePath() +'/keystore.jks')
            storePassword '123456'
        }
    }
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    defaultConfig {
        applicationId "com.gradle"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode project.versionCode as int
        versionName project.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            // 显示Log
            buildConfigField "boolean", "LOG_DEBUG", "true"
            resValue "string", "app_token", "${TOKEN}"
            //混淆
            minifyEnabled false
        }
        release {
            // 如果没有提供混淆规则文件，则设置默认的混淆规则文件（SDK/tools/proguard/proguard-android.txt）
            pseudoLocalesEnabled true
            // 不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"
            //混淆
            minifyEnabled true
            //Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            //加载默认混淆配置文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //签名
            signingConfig signingConfigs.config
        }
//        lintOptions {
//            abortOnError false
//        }
    }
    sourceSets {
//        main {
//            manifest.srcFile 'src/main/AndroidManifest.xml'
//            res.srcDirs = ['src/main/res']
//        }

//        if (isBuildAsModule.toBoolean()) {
//            manifest.srcFile 'src/main/release/AndroidManifest.xml'
//            assets.srcDirs = ['src/main/assets']
//        } else {
//            manifest.srcFile 'src/main/debug/AndroidManifest.xml'
//            //在这里添加最先开始的 assets目录
//            assets.srcDirs += ['../debug_assets']
//            //这里添加我们公用初始化的Application的代码位置
//            java.srcDirs+=['../debug_java']
//        }
    }
    flavorDimensions "one"
    productFlavors {
        tencent {
            applicationId "com.example.tencent"
            minSdkVersion 14
            signingConfig signingConfigs.config
            targetSdkVersion 26
            versionCode 3
            versionName '3.0.0'
            dimension "one"
            manifestPlaceholders = [app_name: "腾讯", icon: "@mipmap/icon_app1", welcome_bg:
                    "@mipmap/img_app1", tint_color: "@color/color_app1", load_url: "http://www.tencent.com"]
        }

        baidu {
            applicationId "com.example.baidu"
            minSdkVersion 14
            signingConfig signingConfigs.config
            targetSdkVersion 26
            versionCode 2
            versionName '2.0.0'
            dimension "one"
            manifestPlaceholders = [app_name : "百度", icon: "@mipmap/icon_app2", welcome_bg:
                    "@mipmap/img_app2", tint_color: "@color/color_app2", load_url: "http://www.baidu.com"]
        }
        xiaomi {
            applicationId "com.example.xiaomi"
            minSdkVersion 14
            signingConfig signingConfigs.config
            targetSdkVersion 26
            versionCode 1
            versionName '1.0.0'
            dimension "one"
            manifestPlaceholders = [app_name : "小米", icon: "@mipmap/icon_app3", welcome_bg:
                    "@mipmap/img_app3", tint_color: "@color/color_app3", load_url: "http://www.xiaomi.com"]
        }
    }
}
repositories {
    flatDir {
        dirs project(':app').file('libs')
    }
}

//自定义APK名称,多渠道打包
android.applicationVariants.all { variant ->
    variant.outputs.all { output ->
        variant.productFlavors.each { flavor ->
            def separator = "_"
            def buildType = variant.variantData.variantConfiguration.buildType.name
            def versionName = variant.versionName
            def versionCode = variant.versionCode
            def date = new Date()
            def formattedDate = date.format('yyyyMMdd')

            def apkName =flavor.name +  separator +buildType + separator + "v" + versionName + separator + versionCode +".apk"
            if (buildType == "release") {
                apkName = flavor.name + separator +buildType + separator + "v" + versionName + separator + versionCode + separator + formattedDate + ".apk"
            }

            output.outputFileName = apkName
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    compile_mylibrary(getProject())
    compile_mylibrary2(getProject())
    compile_basemodule(getProject())
//  compile files('libs/xxx.jar')
    //    implementation(name: 'mylibrary-debug', ext: 'aar')
    //    implementation(name: 'mylibrary2-debug', ext: 'aar')
    //    implementation(name: 'basemodule-debug', ext: 'aar')
    //    implementation(name: 'gamelistlibrary-debug', ext: 'aar')
    //    implementation rootProject.ext.dependencies["appcompat-v7"]
    //    implementation rootProject.ext.dependencies["constraint-layout"]
    //    implementation project(':mylibrary')
    //    implementation project(':mylibrary2')
}
//每个模块，配置的时候并不会执行task；  配置完了以后，有一个重要的回调project.afterEvaluate，它表示所有的模块都已经配置完了，可以准备执行task了；

project.afterEvaluate {
    //在这里可以自动化执行一些task
    tasks.appTask.execute()
    println "app---------------------project.afterEvaluate"
}
task appTask {
    println "app模块已经配置完了..."
}